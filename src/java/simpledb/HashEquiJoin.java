package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple firstTuple;
    //We need to hash the tuples of a relation.
    private Map<Field, ArrayList<Tuple>> fieldToTupleList = new HashMap<Field, ArrayList<Tuple>>();

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        firstTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
    	return this.p;
    }

    public TupleDesc getTupleDesc() {
    	return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }
    
    public String getJoinField1Name()
    {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        this.child1.open();
        this.child2.open();
        super.open();
        
        hashFieldsOfSecondChild();
    }
    
    private void hashFieldsOfSecondChild() throws NoSuchElementException, DbException, TransactionAbortedException {
    	while(this.child2.hasNext()) {
    		Tuple currTuple = child2.next();
    		Field f = currTuple.getField(p.getField1());
    		
    		if(!fieldToTupleList.containsKey(f)) {

    			fieldToTupleList.put(f, new ArrayList<> (Arrays.asList(currTuple)));
    		} else {
    			List<Tuple> li = fieldToTupleList.get(f);
    			li.add(currTuple);
    		}
    	}
    }

    public void close() {
        this.child1.close();
        this.child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	this.child1.rewind();
        this.child2.rewind();
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        //Exhaust the current list of joins.
    	if(listIt!=null && listIt.hasNext()){
            return returnTuple();
        }
    	
        while(child1.hasNext()){
            firstTuple = child1.next();
            Field field1 = firstTuple.getField(p.getField1());
            
            if(fieldToTupleList.containsKey(field1)) {
                listIt = fieldToTupleList.get(field1).iterator();
                return returnTuple();
            }
        }
        return null;
    }

    private Tuple returnTuple() {
        Tuple secondTuple = listIt.next();
        TupleDesc mergedTupleDesc = TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
        
        Tuple returnTuple = new Tuple(mergedTupleDesc);
		int firstTupleNumberOfFields = firstTuple.getTupleDesc().numFields();

		for(int i = 0 ; i < mergedTupleDesc.numFields() ; i++) {
			
			if(i < firstTupleNumberOfFields)
				returnTuple.setField(i, firstTuple.getField(i));
			else
				returnTuple.setField(i, secondTuple.getField(i - firstTupleNumberOfFields));
		}
		
		return returnTuple;
    }

    @Override
    public DbIterator[] getChildren() {
    	return new DbIterator[] {this.child1, this.child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }
    
}
